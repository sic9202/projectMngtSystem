<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="egovframework.projectMngt.service.impl.ProjectMngtMapper">
	<!-- login & signUp 시작 -->
	<insert id="signUp" parameterType="LoginVO">
		INSERT INTO 
			user (user_email, passwd, user_name, phone_num, join_date, use_yn) 
		VALUES 
			(#{user_id}, #{encrypt_pwd}, #{user_name}, #{phone_num}, now(), 'Y')
	</insert>
	
	<select id="checkUser1" resultType="int" parameterType="Map">
		SELECT
			COUNT(*) 
		FROM 
			user
		WHERE
			user_email = #{user_id};
	</select>
	
	<select id="checkUser2" resultType="int" parameterType="Map">
		SELECT
			COUNT(*)
		FROM
			user
		WHERE
			user_email = #{user_id} AND passwd = #{encrypt_pwd};
	</select>
	
	<select id="getUserInfo" resultType="LoginVO" parameterType="Map">
		SELECT 
			idx AS user_idx,
			user_email AS user_id,
			passwd AS user_pwd,
			user_name,
			phone_num,
			join_date,
			use_yn
		FROM
			user
		WHERE
			user_email = #{user_id} 
		AND
			passwd = #{encrypt_pwd};
	</select>
	
	<select id="duplicateCheck" resultType="int" parameterType="String">
		SELECT 
			COUNT(*)
		FROM
			user
		WHERE
			user_email = #{user_id} 
	</select>
	<!-- login & signUp 끝-->
	
	<!-- project 시작 -->
	<select id="getProjectList" parameterType="SearchVO" resultType="ProjectVO">
		SELECT
			p.idx AS project_idx,
			project_name,
			project_type,
			project_reg_date,
			p.reg_user_idx,
			u.user_name AS reg_user_name,
			project_info
		FROM
			project p
		JOIN user u ON p.reg_user_idx = u.idx
		ORDER BY project_reg_date DESC
		LIMIT #{firstIndex}, #{recordCountPerPage};
	</select>

	<select id="getProjectListCnt" resultType="int">
		SELECT
			COUNT(*)
		FROM
			project p
		JOIN user u ON p.reg_user_idx = u.idx;
	</select>
	
	<insert id="addProject" parameterType="ProjectVO">
		INSERT INTO 
			project (project_name, project_type, reg_user_idx, project_info) 
		VALUES 
			(#{project_name}, #{project_type}, #{reg_user_idx}, #{project_info});
	</insert>
	
	<select id="getProjectInfo" resultType="ProjectVO" parameterType="int">
		SELECT
			p.idx AS project_idx,
			project_name,
			project_type,
			project_reg_date,
			reg_user_idx,
			u.user_name AS reg_user_name
		FROM
			project p
		JOIN 
			user u ON p.reg_user_idx = u.idx
		WHERE
			p.idx = #{project_idx};
	</select>
	<!-- project 끝 -->
	
	<!-- schedule 시작 -->
	<select id="getScheduleList" resultType="ScheduleVO" parameterType="SearchVO">
		SELECT
			s.idx AS schedule_idx,
			project_idx,
			schedule_name,
			schedule_reg_date,
			s.reg_user_idx,
			u.user_name AS reg_user_name
		FROM
			schedule s
		JOIN
			user u ON s.reg_user_idx = u.idx
		WHERE
			s.project_idx = #{project_idx}
		ORDER BY
			schedule_reg_date DESC
		LIMIT #{firstIndex}, #{recordCountPerPage}
	</select>

	<select id="getScheduleListCnt" resultType="int" parameterType="int">
		SELECT
			COUNT(*)
		FROM
			schedule s
		JOIN
			user u ON s.reg_user_idx = u.idx
		WHERE
			s.project_idx = #{project_idx};
	</select>
	
	<insert id="addSchedule" parameterType="ScheduleVO">
		INSERT INTO 
			schedule (project_idx, schedule_name, schedule_reg_date, reg_user_idx) 
		VALUES 
			(#{project_idx}, #{schedule_name}, now(), #{reg_user_idx});
	</insert>
	
	<select id="getScheduleInfo" resultType="ScheduleVO" parameterType="int">
		SELECT
			s.idx AS schedule_idx,
			schedule_name,
			schedule_reg_date,
			s.project_idx,
			s.reg_user_idx,
			u.user_name AS reg_user_name,
			project_name
		FROM
			schedule s
		JOIN 
			user u ON s.reg_user_idx = u.idx
		JOIN
			project p ON s.project_idx = p.idx
		WHERE
			s.idx = #{schedule_idx};
	</select>
	<!-- schedule 끝 -->
	
	<!-- work 시작 -->
	<select id="getWorkList" resultType="WorkVO" parameterType="SearchVO">
		SELECT
			w.idx AS work_idx,
			schedule_idx,
			project_idx,
			work_reg_date,
			work_name,
			w.reg_user_idx,
			u.user_name AS reg_user_name
		FROM
			work w
		JOIN 
			user u ON w.reg_user_idx = u.idx
		WHERE
			w.schedule_idx = #{schedule_idx}
		ORDER BY
			work_reg_date DESC
		LIMIT #{firstIndex}, #{recordCountPerPage}
	</select>

	<select id="getWorkListCnt" resultType="int" parameterType="SearchVO">
		SELECT
			COUNT(*)
		FROM
			work w
		JOIN 
			user u ON w.reg_user_idx = u.idx
		WHERE
			w.schedule_idx = #{schedule_idx};
	</select>
	
	<select id="getWorkInfo" resultType="WorkVo" parameterType="int">
		SELECT
			w.idx AS work_idx,
			schedule_idx,
			project_idx,
			work_reg_date,
			work_name,
			reg_user_idx,
			u.user_name AS reg_user_name
		FROM
			work w
		JOIN 
			user u ON w.reg_user_idx = u.idx
		WHERE
			w.idx = #{work_idx};
	</select>
	
	<insert id="addWork" parameterType="WorkVO">
		INSERT INTO 
			work (schedule_idx, project_idx, work_reg_date, work_name, reg_user_idx) 
		VALUES 
			(#{schedule_idx}, #{project_idx}, now(), #{work_name}, #{reg_user_idx});
	</insert>
	<!-- work 끝 -->
	
	<!-- work_data 시작 -->
	<select id="getWorkDataList" resultType="WorkDataVO" parameterType="int">
		SELECT
			wd.idx AS work_data_idx,
			wd.work_idx,
			str_date,
			end_date,
			support_time,
			support_type,
			support_content,
			severity,
			reg_user_idx,
			u.user_name AS reg_user_name,
			fi.idx AS file_idx,
			fi.file_name,
			fi.file_size,
			fi.del_yn  
		FROM
			work_data wd
		JOIN 
			user u ON wd.reg_user_idx = u.idx
		LEFT JOIN
			file_info fi ON fi.work_data_idx = wd.idx
		WHERE
			wd.work_idx = #{work_idx}
		ORDER BY end_date DESC, upd_date DESC;
	</select>
	
	<select id="getWorkDataListCnt" resultType="int" parameterType="int">
		SELECT
			COUNT(*)
		FROM
			work_data wd
		JOIN 
			user u ON wd.reg_user_idx = u.idx
		WHERE
			wd.work_idx = #{work_idx};
	</select>
	
	<insert id="addWorkData" parameterType="java.util.HashMap">
		<if test="addList.size != 0">
			INSERT INTO work_data(
				work_idx,
				str_date,
				end_date,
				support_time,
				support_type,
				support_content,
				severity,
				reg_user_idx,
				work_data_reg_date
			) VALUES
			<foreach collection="addList" item="item" separator=",">
				(
					${item.work_idx},
					'${item.str_date}',
					'${item.end_date}',
					${item.support_time},
					'${item.support_type}',
					'${item.support_content}',
					${item.severity},
					${item.reg_user_idx},
					now()
				)
			</foreach>
		</if>
	</insert>
	
	<update id="updWorkData" parameterType="java.util.HashMap">
		<if test="updList.size != 0">
			<foreach collection="updList" item="item" separator=";" close=";">
				UPDATE work_data
				SET
					str_date = '${item.str_date}',
					end_date = '${item.end_date}',
					support_time = ${item.support_time},
					support_type = '${item.support_type}',
					support_content = '${item.support_content}',
					severity = ${item.severity},
					upd_date = now()
				WHERE
					idx = ${item.work_data_idx}
			</foreach>
		</if>
	</update>
	
	<delete id="delWorkData" parameterType="java.util.HashMap">
		<if test="delList.size != 0">
			DELETE FROM work_data
			<where> 
				<foreach collection="delList" item="item" separator="OR">
					(idx = ${item.work_data_idx} AND work_idx = ${item.work_idx})
				</foreach>
			</where>
		</if>
	</delete>
	<!-- work_data 끝 -->
	
	<!-- uploadFile 시작 -->
	<select id="getUploadFileInfo" parameterType="FileVO" resultType="FileVO">
		SELECT
			idx AS file_idx,
			file_name,
			file_path,
			file_size,
			upload_date,
			ext,
			del_yn,
			work_data_idx,
			work_idx
		FROM
			file_info
		WHERE 1=1
		<if test="work_data_idx != null and work_data_idx != ''">
			AND work_data_idx = #{work_data_idx}
		</if>
		<if test="file_idx != null and file_idx != ''">
			AND idx = #{file_idx}	
		</if>
	</select>
	
	<insert id="addFileInfo" parameterType="FileVO">
		INSERT INTO
			file_info(
				file_name,
				file_path,
				file_size,
				upload_date,
				ext,
				del_yn,
				work_data_idx,
				work_idx
			)
		VALUES
			(
				#{file_name},
				#{file_path},
				#{file_size},
				now(),
				#{ext},
				'N',
				#{work_data_idx},
				#{work_idx}
			)
	</insert>
	
	<delete id="delFileInfo" parameterType="java.util.HashMap">
		<if test="delList.size != 0">
			DELETE FROM file_info
			<where> 
				<foreach collection="delList" item="item" separator="OR">
					(work_data_idx = ${item.work_data_idx})
				</foreach>
			</where>
		</if>
	</delete>
	
	<update id="updDelYn" parameterType="FileVO">
		UPDATE 
			file_info
		SET
			del_yn = 'Y'
		WHERE
			idx = #{file_idx};
	</update>
	
	<update id="updAddedFileInfo" parameterType="FileVO">
		UPDATE
			file_info
		SET
			file_name = #{file_name},
			file_path = #{file_path},
			file_size = #{file_size},
			upload_date = now(),
			ext = #{ext},
			del_yn = 'N'
		WHERE
			idx = #{file_idx}
	</update>
	<!-- uploadFile 끝 -->
</mapper>